# -*- coding: utf-8 -*-

"""
mixpanelexportapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from mixpanelexportapi.api_helper import APIHelper
from mixpanelexportapi.configuration import Server
from mixpanelexportapi.controllers.base_controller import BaseController


class ExportDataController(BaseController):

    """A Controller to access Endpoints in the mixpanelexportapi API."""
    def __init__(self, config, auth_managers):
        super(ExportDataController, self).__init__(config, auth_managers)

    def mixpanel_events_data(self,
                             from_date,
                             to_date,
                             where,
                             project_id,
                             accept,
                             limit=None,
                             event=None):
        """Does a GET request to /export.

        Get Mixpanel Events

        Args:
            from_date (string): The date in yyyy-mm-dd format to begin
                querying from. This date is inclusive.
            to_date (string): The date in yyyy-mm-dd format to query to. This
                date is inclusive.
            where (string): An expression to filter events by.
            project_id (int): Your Mixpanel Project Id.
            accept (string): TODO: type description here.
            limit (int, optional): The max number of events to be returned.
            event (list of string, optional): The event or events that you
                wish to get data for, encoded as a JSON array.

        Returns:
            string: Response from the API. Success. The return is format is
                one event per line sorted by increasing timestamp. Each line
                is a valid JSON object, but the full return itself is JSONL.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/export'
        _query_builder = self.config.get_base_uri()
        _query_builder += _url_path
        _query_parameters = {
            'from_date': from_date,
            'to_date': to_date,
            'where': where,
            'project_id': project_id,
            'limit': limit,
            'event': event
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        # Apply authentication scheme on request
        self.apply_auth_schemes(_request, 'global')

        _response = self.execute_request(_request)
        self.validate_response(_response)

        decoded = _response.text

        return decoded
